Usage: <command usage>\n<cmd-description>\n\nOptions:\n<option>\t<noption-text>

{"malloc",malloc,"Usage: malloc [-free] [tam]\n The shell allocates tam bytes using malloc and shows the memory address returned by malloc. This address, together with tam and the time of the allocation, must be kept in the aforementioned list. If tam is not specified the command will show the list of addresses allocated with the malloc command. malloc() requires an argument of size_t.\n\nOptions: -free: \tDeallocates one of the blocks of size tam that has been allocated with the command malloc. If no such block exists or if tam is not specified, the command will show the list of addresses allocated with the malloc command. Should there be more than one block of size tam it deallocates ONLY one of them(any)."}

{"mmap", mmapimpl, "Usage: mmap [-free] fich [perm]\nMaps in memory the file fich (all of its length starting at offset 0) and shows the memory address where the file has been mapped. perm represents the mapping permissions (rwx format, without spaces). The address of the mapping, together with the size, the name of the file, the file descriptor, and the time of the mapping will be stored in the aforementioned list. If fich is not specified, the command will show the list of addresses allocated with the mmap command.\n\nOptions: -free\tUnmaps and closes the file fich and removes the address where it was mapped from the list. If fich has been mapped several times, only one of the mappings will be undone. If the file fich is not mapped by the process or if fich is not specified, the command will show the list of addresses (and size, and time . . . ) allocated with the mmap command."}
Usage: mmap [-free] fich [perm]\nMaps in memory the file fich (all of its length starting at offset 0) and shows the memory address where the file has been mapped. perm represents the mapping permissions (rwx format, without spaces). The address of the mapping, together with the size, the name of the file, the file descriptor, and the time of the mapping will be stored in the aforementioned list. If fich is not specified, the command will show the list of addresses allocated with the mmap command.\n\nOptions: -free\tUnmaps and closes the file fich and removes the
address where it was mapped from the list. If fich has been mapped
several times, only one of the mappings will be undone. If the file fich
is not mapped by the process or if fich is not specified, the command
will show the list of addresses (and size, and time . . . ) allocated with
the mmap command.

"shared",shared,"Usage: shared [-free|-create|-delkey] cl [tam]\nGets shared memory of key cl, maps it in the process' address space and shows the memory address where the shared memory has been mapped. That address, together with the key, the size of the shared memory block and the time of the mapping will be stored in the aforemetioned list. cl IS THE KEY, (ftok should not be used). Parameter tam is only used when creating a new block of shared memory. if -create is not given, it is assumed that key cl is in use in the system so a new block of shared memory SHOULD NOT BE CREATED, and an error must be reported if a block of key cl does not exist. If no cl is specified, the command will show the list of addresses (and size, and time...) allocated with the shared command. (shared memory blocks can be of size_t sizeE). The memory should be obtained with shmget, not searched for in the list.\n\nOptions:\n-create cl tam\tCreates a shared memory block of key cl, and size tam, maps it in the process address space and shows the memory address where the shared memory has been mapped. That address, together with the key, the size of the shared memory block and the time of the mapping, will be stored in the aforementioned list.\n-free cl\tDetaches the shared memory block with key cl from the process' address space and eliminates its address from the list. If shared memory block with key cl has been attached several times, ONLY one of them is detached. cl IS THE KEY, ftok should not be used. If cl is not specified, the command will show the list of addressed (and size, and time ...) allocated with the shared command.\n-delkey cl\t Removes the shared memory region of key cl, nothing gets unmapped: this is just a call to shmctl(id, IPC_RMID...)

"dealloc",dealloc,"Usage: dealloc [-malloc|-shared|-mmap]...\nDeallocates one of the memory blocks allocated with the command malloc, mmap or shared and removes it from the list. If no arguments are given, it prints a list of the allocated memory blocks (that is, prints the list).\n\nOptions:\n-malloc size\t Does exactly the same as malloc -free size.\ndealloc -shared cl\tDoes exactly the same as shared -free cl\ndealloc -mmap file\tDoes exactly the same as mmap -free file.\ndealloc addr\tDeallocates addr( it searches in the list how it was allocated, and proceeds accordingly) and removes it from the list. If addr is not in the list or if addr is not supplied the command will show all the addresses (and size, and time...) allocated with the malloc, mmap, shared commands. This does the same (albeit with a different parameter) as malloc -free, shared -free or mmap-free deppending on addr."

"memoria", memoria,"Usage: memoria [-blocks][-vars][-funcs][-all][-pmap] Shows addresses inside the process memory space. If not arguments are given, is equivalent to all.\n\nOptions:\n-blocks\tShows the list of addresses (and size, and time...)allocated with the malloc, shared and mmap.\n-vars\t Prints the memory addresses of nine variables of the shell: three exernal (global) initialized variables, three static initialized and three automatic (local) initialized variables.\n-funcs\tPrints the memory addresses of three program functions of the shell and three C library functions used in the shell program\n-all\tDoes the equivalent to -blocks, -vars and -funcs together.\n-pmap\tCalls the program pmap for the shell process (sample ode is given in the clues section).

"volcarmem",volcarmem,"Usage: volcarmem addr [cont]\nShows the contents of cont bytes starting at memory address addr. If cont is not specified, it shows 25 btes. For each byte it prints (at different lines) its hex value and its associated char (a blank if it is a non-printable character). It prints 25 bytes per line. addr SHOULD NOT BE CHECKED FOR VALIDITY, so, this command could produce segmentation fault should addr were not valid.

"llenarmem",llenarmem,"Usage: llenarmem addr [cont][byte]\nFills cont bytes of memory starting at address addr with the value 'byte'. if 'byte' is not specified, the value 65 (0x42 or capital A) is assumed, and if cont is not specified, we'll use a default value of 128. Addr SHOULD NOT BE CHECKED FOR VALIDITY, so, this command could produce segmentation fault should addr were not valid.

"recursiva",recursiva,"Usage: recursiva n\nCalls a recursive function passing the integer n as its parameter. This recursive function receives the number of times it has to call itself. This function has two variables: an automatic array of 4096 bytes and a static array of the same size. It does the following:\n\n\t-prints the value of the received parameter as well as its memory address\n\t-prints the address of the static array.\n\t-prints the address of the automatic array.\n\tdecrements n(its parameter) and if n is greater than 0 it calls itself."

"e-s",es,"Usage: read fich addr cont\nReads (using ONE read system call) cont bytes from file fich into memory address addr. If cont is not specified ALL of fich is read onto memory address addr. Depending on the value of addr a segmentation fault could be produced.

"e-s",es,write[-o] fich addr cont\nWrites (using ONE write system call) cont bytes from memory address addr into file fich. If file fich does not exist it gets created; if it already exists it is not overwritten unless "-o" (overwrite) is specified.
